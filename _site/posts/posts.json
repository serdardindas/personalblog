[
  {
    "path": "posts/2021-04-17-postgres-with-r/",
    "title": "Postgres With R",
    "description": "How to connect and do R/SQL operations in Postgres database with R",
    "author": [
      {
        "name": "Serdar DINDAS",
        "url": {}
      }
    ],
    "date": "2021-04-14",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n1)Libraries\r\n2)Connect Postgres Database from R\r\n3)Import Table Into Postgresql\r\n4)Call Tables From Database\r\n5)Manipulate Data\r\n6)Add New Data Row to Table\r\n7)Delete Data Block or Row From Data Table\r\nConclusion\r\n\r\n\r\nPhoto by Darwin Vegher on Unsplash\r\nIn this post I will give information about how to connect your database from R, and +Add, Manipulate data tables using R or SQL codes. I choose PostgresSQL as database.\r\nAs example data I use Tidy Tuesday Video Games Dataset. It contains more than 26K rows. So I filter data frame only 3 developers, Ubisoft Montreal, Valve, Square Enix and create little data table. You can find .xlsx files on my repo.\r\n1)Libraries\r\n\r\n\r\nlibrary(DBI)        # A database interface for communication between R and relational database management systems \r\nlibrary(RPostgres)  # Interface for 'PostgreSQL\r\nlibrary(dplyr)      # For data manipulation [Best Tool Ever :)]\r\n\r\n\r\n\r\n2)Connect Postgres Database from R\r\nI already create database in my local Postgres named VideoGames. This database has no data tables in it.\r\nFirstly we need to introduce our database to R. To create connection, we define con variable.\r\n\r\n\r\ncon <- dbConnect(\r\n  RPostgres::Postgres(), # Call Postgres interface \r\n  host = \"localhost\",    # Host is where your database hosted. In this example I use my local database\r\n  port = 5432,           # Your database connection port, It defult 5432 for Postgres\r\n  dbname = \"VideoGames\", # Your database name\r\n  user = \"postgres\",     # Your Postgres database username\r\n  password = \"sanjeon\"   # Your Postgres database password\r\n)\r\n\r\n\r\n\r\nTo check database connection has been established dbIsValid(con) can be used. Most of the time we’re going to use con argument with database functions.\r\n\r\n\r\ndbIsValid(con)\r\n\r\n\r\n[1] TRUE\r\n\r\nNow you see [TRUE] that shows we connect VideoGames database with R.\r\ndbListTables() list all tables that database have.\r\n\r\n\r\ndbListTables(con)\r\n\r\n\r\n[1] \"videogames_data\"  \"videogames_price\" \"higherthan_80\"   \r\n\r\nThat has no table in it.\r\n3)Import Table Into Postgresql\r\nLet’s import our table into VideoGames database. I will use video_games_data as I mentioned before.\r\n\r\n\r\nvideo_games_data <- readxl::read_excel(\"video_games_data.xlsx\", \r\n                                       col_types = c(\"numeric\", \"text\", \"text\", \"text\", \"numeric\"))\r\nvideo_games_price <- readxl::read_excel(\"video_games_price.xlsx\", \r\n                                       col_types = c(\"numeric\", \"text\", \"numeric\"))\r\ndbWriteTable(con, \"videogames_data\", video_games_data, overwrite=TRUE)\r\ndbWriteTable(con, \"videogames_price\", video_games_price, overwrite=TRUE)\r\n\r\n\r\n\r\nWith dbWriteTable() function we add our table. As you see in the function there is overwrite argument in it. Overwrite=TRUE helps you overwrite your table if already exist.\r\n\r\n\r\ndbListTables(con)\r\n\r\n\r\n[1] \"higherthan_80\"    \"videogames_data\"  \"videogames_price\"\r\n\r\nNow dbListTables(con) returns with value : [1] “videogames_data” “videogames_price”\r\nTables’s fields ->videogames_data: number(ID), game, release_date, developer, metascorevideogames_price: number(ID), game, price\r\n4)Call Tables From Database\r\ni) With Dplyr’s tbl() functiontbl() function can be used for database operations. With tbl() you can bring your database table to your local R enviroment as a List. If you need your database table as data frame you need to add collect() end of pipeline.\r\n\r\n\r\nvideogames_data <-tbl(con,\"videogames_data\") %>% collect()\r\n\r\n\r\n\r\nii) With DBI’s dbSendQuery() functiondbSendQuery() function lets you use SQL queries inside in it. You could take data as you need at the beginning by from database with queries. You have to add extra step convert your query to data frame output with dbFetch() like collect() in dplyr.\r\n\r\n\r\nvideogames_price <- dbSendQuery(con, \"SELECT * FROM videogames_price\") %>% dbFetch()\r\n\r\n\r\n\r\n5)Manipulate Data\r\ni) With Dplyr tbl() functiontbl() let user dplyr’s manipulation functions such as: filter, select, arrange, mutate etc. after in a pipeline. You should not forget collect at the end of the pipeline to get your data as data frame.\r\n\r\n\r\nHigher_Than_80 <- tbl(con, \"videogames_data\") %>% \r\n                            filter(metascore>=80) %>% \r\n                            group_by(developer) %>%\r\n                            summarise(Games_Count_Higher_Than_80=n()) %>% \r\n                            arrange(desc(Games_Count_Higher_Than_80)) #%>% \r\n                            #collect()\r\nHigher_Than_80\r\n\r\n\r\n# Source:     lazy query [?? x 2]\r\n# Database:   postgres [postgres@localhost:5432/VideoGames]\r\n# Ordered by: desc(Games_Count_Higher_Than_80)\r\n  developer        Games_Count_Higher_Than_80\r\n  <chr>                               <int64>\r\n1 Ubisoft Montreal                         17\r\n2 Valve                                    11\r\n3 Square Enix                               2\r\n\r\nThis is the thing you might see Source lazy query [?? x 2] I will not give detail about it. But if you want to get any idea about I suggest you to take a look Vebash Naidoo’s Post that gives me starting point.\r\n\r\nDplyr also has show_query() function, helps you convert your dplyr pipelines into SQL queries. This is amazing tool for R users who is SQL-beginner.\r\n\r\n\r\ntbl(con, \"videogames_data\") %>% \r\n          filter(metascore>=80) %>% \r\n          group_by(developer) %>%\r\n          summarise(Games_Count_Higher_Than_80=n()) %>% \r\n          arrange(desc(Games_Count_Higher_Than_80)) %>%\r\n          show_query()\r\n\r\n\r\n<SQL>\r\nSELECT \"developer\", COUNT(*) AS \"Games_Count_Higher_Than_80\"\r\nFROM \"videogames_data\"\r\nWHERE (\"metascore\" >= 80.0)\r\nGROUP BY \"developer\"\r\nORDER BY \"Games_Count_Higher_Than_80\" DESC\r\n\r\nii) With DBI dbSendQuery() function\r\nAs I mentioned before dbSendQuery() execute SQL queries. We use show_query output inside it. Again dbFetch() is here for turning into data frame.\r\n\r\n\r\ndbFetch(\r\ndbSendQuery(con, \r\n                 'SELECT \"developer\", COUNT(*) AS \"Games_Count_Higher_Than_80\"\r\n FROM \"videogames_data\"\r\n WHERE (\"metascore\" >= 80.0)\r\n GROUP BY \"developer\"\r\n ORDER BY \"Games_Count_Higher_Than_80\" DESC' )\r\n)\r\n\r\n\r\n         developer Games_Count_Higher_Than_80\r\n1 Ubisoft Montreal                         17\r\n2            Valve                         11\r\n3      Square Enix                          2\r\n\r\niii) Import Result Table Into Database\r\nIt is possible that you can add your new data frame defined in R enviroment into database. Code chunk we defined Higher_Than_80 data frame we commented #collect() function to show lazy query term.\r\n\r\n\r\nHigher_Than_80 <-Higher_Than_80 %>% collect()\r\ndbWriteTable(con, \"higherthan_80\", Higher_Than_80, overwrite=TRUE)\r\n\r\n\r\n\r\n6)Add New Data Row to Table\r\nThis part we try to add new data input directly into database table.\r\nThere is also an alternative way.You can also take database table into R Enviroment, add your new data input in here, and reload your data frame into database again. I believe this could be costly, haven’t try for large data tables yet.\r\nFirst we define our new input data. I choose Ubisoft Montreal’s Assasins Creed Valhalla as an example.\r\n\r\n\r\nnew_input <- data.frame(number= 8000,\r\n           game= \"Assassins Creed Valhalla\",\r\n           release_date= \"Nov 10, 2020\",\r\n           developer= \"Ubisoft Montreal\",\r\n           metascore= 82)\r\n\r\n\r\n\r\nnumber\r\ngame\r\nrelease_date\r\ndeveloper\r\nmetascore\r\n8000\r\nAssassins Creed Valhalla\r\nNov 10, 2020\r\nUbisoft Montreal\r\n82\r\nLets add this new row of data into videogames_data table. We use dbWriteTable() again for this process.\r\n\r\n\r\ndbWriteTable(con, name=\"videogames_data\",\r\n                  new_input,\r\n                  append=TRUE,\r\n                  row.names=FALSE, # drop new_input data rownames\r\n                  overwrite=FALSE)  # prevent from add same data\r\n\r\n\r\n\r\nLets check last 5 row of videogames_data table in database.For this we can use tail() function but we get error like: tail() is not supported by sql. But head() function not give an error like tail(). So we arrange data frame with descending order and head() it.\r\n\r\n\r\ntbl(con, \"videogames_data\") %>% arrange(desc(number)) %>% head(5)\r\n\r\n\r\n# Source:     lazy query [?? x 5]\r\n# Database:   postgres [postgres@localhost:5432/VideoGames]\r\n# Ordered by: desc(number)\r\n  number game                       release_date developer   metascore\r\n   <dbl> <chr>                      <chr>        <chr>           <dbl>\r\n1   8000 Assassins Creed Valhalla   Nov 10, 2020 Ubisoft Mo~        82\r\n2   7967 FINAL FANTASY XV WINDOWS ~ Mar 6, 2018  Square Enix         0\r\n3   6795 DRAGON QUEST XI: Echoes o~ Sep 4, 2018  Square Enix         0\r\n4   6247 FINAL FANTASY XV WINDOWS ~ Jun 7, 2018  Square Enix         0\r\n5   6144 Assassins Creed Origins    Oct 26, 2017 Ubisoft Mo~         0\r\n\r\nwe can see Assassins Creed Vahalla in the first row of table (thanks to arrange(desc()))\r\n7)Delete Data Block or Row From Data Table\r\nThis part i give an additional information. While I searching about database operations with R. I curious about how to delete any information from database directly. I find a solution using with dbExecute() + SQL\r\nTo delete data, we added before “Assassins Creed Vahalla” which has ID number = 8000\r\n\r\n\r\ndbExecute(con, 'DELETE from videogames_data WHERE number=8000' )\r\n\r\n\r\n[1] 1\r\n\r\nAnd check table again\r\n\r\n\r\ntbl(con, \"videogames_data\") %>% arrange(desc(number)) %>% head(5)\r\n\r\n\r\n# Source:     lazy query [?? x 5]\r\n# Database:   postgres [postgres@localhost:5432/VideoGames]\r\n# Ordered by: desc(number)\r\n  number game                       release_date developer   metascore\r\n   <dbl> <chr>                      <chr>        <chr>           <dbl>\r\n1   7967 FINAL FANTASY XV WINDOWS ~ Mar 6, 2018  Square Enix         0\r\n2   6795 DRAGON QUEST XI: Echoes o~ Sep 4, 2018  Square Enix         0\r\n3   6247 FINAL FANTASY XV WINDOWS ~ Jun 7, 2018  Square Enix         0\r\n4   6144 Assassins Creed Origins    Oct 26, 2017 Ubisoft Mo~         0\r\n5   5979 Tales of Wedding Rings VR  Sep 24, 2018 Square Enix         0\r\n\r\nYou see “Assassins Creed Vahalla” data already deleted. You can use this query style to exclude more than a row, like using WHERE developer=Valve\r\nConclusion\r\nWith this post I try to give brief instructions how to use R for PostgreSQL database operations. I gather some basic usage of R codes from blog post and stackoverflow.\r\nI’m grateful Vebaash Naidoo for her blog posts that help me to pave way to create this post.\r\n\r\n——————————- This Post Made with by ❤️ ———————————\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-04-17-postgres-with-r/postgres_and_r.png",
    "last_modified": "2021-04-17T14:27:45+03:00",
    "input_file": "postgres-with-r.utf8.md"
  },
  {
    "path": "posts/2021-04-08-horizontal-stacked-bar-chart/",
    "title": "Horizontal Stacked Bar Chart",
    "description": "How to create single horizontal stacked bar chart with R",
    "author": [
      {
        "name": "Serdar DINDAS",
        "url": {}
      }
    ],
    "date": "2021-04-08",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nSTEP 1. / Data and Packages\r\nSTEP 2. / Simple Start\r\nSTEP 3. / Rest Of It :)\r\n\r\nHello dear Rstats friends, with this post I will try to help you how you could create horizontal stacked bar chart. This is my first post i hope you enjoy.\r\nFirstly i want to show you an example of horizontal stacked chart.\r\n\r\nThis chart belongs to Unity’s 2021 GamingReport. Unity is world’s leading platform for creating games. If you’re a person who is game developer you must heard of it.\r\nSo in this chart we will see 4 components. 3 of it is our charts, one of it its’ labels. We will create this chart step by step.\r\nWe will use ggplot package to create each three charts, and patchwork package to combine all three charts. together.\r\nSTEP 1. / Data and Packages\r\nFirst we will call our packages\r\n\r\n\r\nlibrary(ggplot2)\r\nlibrary(patchwork)\r\nlibrary(dplyr) # To use a little trick\r\n\r\n\r\n\r\nNext we create our data frame\r\n\r\n\r\n df <- data.frame(Results = c(\"Strongly Agree\",\"Agree\", \"Neither agree nor disagree\", \"Disagree\",\"Strongly Disagree\"),\r\n                       Proportion = c(50,19,6,13,13))\r\n\r\ndf <- df %>%  mutate(year=1) # This is little trick as I mentioned before. We add dummy variable like \"year\" as i used.\r\n\r\n\r\n\r\nSTEP 2. / Simple Start\r\nAfter this step lets try to make our first basic graph.\r\n\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + geom_col()\r\n\r\n\r\n\r\n\r\nYou see bar plot is stacked but vertically. Colors are defined randomly.\r\nSTEP 3. / Rest Of It :)\r\nNow we can turn the bar plot horizontally with coord_flip() function.\r\n\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        coord_flip()\r\n\r\n\r\n\r\n\r\nAt this time if you look closely to the labels, You may notice a discrepancy in the ranking of legends, they sorted in alphabetical order. To avoid from this situation we will factorize Results column. This will help you to give all elements, in Results column, a specific order.\r\n\r\n\r\ndf$Results <- factor(df$Results, levels = c(\"Strongly Agree\",\"Agree\", \"Neither agree nor disagree\",\r\n                                            \"Disagree\",\"Strongly Disagree\"))\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        coord_flip()\r\n\r\n\r\n\r\n\r\nNow we can adjust the appearance of colors in this stage. You can use google chrome extension “Eye Dropper” to extract colors codes. I choose colors to match the original.\r\n\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n       coord_flip()  \r\n\r\n\r\n\r\n\r\nThis time we need show percentages like 50, 19, 6, 13, 13 on graph by colors. To do this we use geom_text() functions , with position and size arguments.\r\n\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        geom_text(aes(label = paste0(Proportion, \"%\")), # Add labels \"%\" \r\n                      position = position_stack(vjust = 0.5), # Position each label center of each part.\r\n                      size = 5)+ # Size of labels\r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n        coord_flip() \r\n\r\n\r\n\r\n\r\nNow we change some appearance of graph inside theme() function. We can remove graph grids, title, ticks.\r\n\r\n\r\nggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        geom_text(aes(label = paste0(Proportion, \"%\")),\r\n                      position = position_stack(vjust = 0.5), \r\n                      size = 5)+ \r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n        coord_flip()+ \r\n        theme(legend.position = \"right\",\r\n              panel.grid.major = element_blank(), #Remove graphs grids, borders and background \r\n              panel.grid.minor = element_blank(),\r\n              panel.border = element_blank(),\r\n              panel.background = element_blank(), \r\n              axis.title = element_blank(), #Remove title, ticks and text parts\r\n              axis.ticks = element_blank(),\r\n              axis.text = element_blank(),\r\n              legend.title = element_blank())+ #Remove title of legend\r\n              guides(fill = guide_legend(reverse=TRUE)) # Reverse legend order as it shows in report.\r\n\r\n\r\n\r\n\r\nAfter making this simple chart we can create 3 of them and combine together. This time we will use patchwork package to glue them.\r\nLet’s create 3 part of horizontal stacked bar chart for different data. Each of this graphs will named p1, p2 and p3. If you want to check the code you can click Show code.\r\n\r\n\r\nShow code\r\n\r\ndf <- data.frame(Results = c(\"Strongly Agree\",\"Agree\", \"Neither agree nor disagree\", \"Disagree\",\"Strongly Disagree\"),\r\n                       Proportion = c(50,19,6,13,13))\r\n\r\ndf <- df %>%  mutate(year=1) \r\n\r\ndf$Results <- factor(df$Results, levels = c(\"Strongly Agree\",\"Agree\",\r\n                                            \"Neither agree nor disagree\",\"Disagree\",\"Strongly Disagree\"))\r\n\r\np1 <-ggplot(df, aes(x = year , y = Proportion, fill = Results)) + \r\n        geom_col()+\r\n        geom_text(aes(label = paste0(Proportion, \"%\")),\r\n                      position = position_stack(vjust = 0.5), \r\n                      size = 5)+ \r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n        coord_flip()+ \r\n        theme(legend.position = \"right\",\r\n              panel.grid.major = element_blank(), \r\n              panel.grid.minor = element_blank(),\r\n              panel.border = element_blank(),\r\n              panel.background = element_blank(), \r\n              axis.title = element_blank(),\r\n              axis.ticks = element_blank(),\r\n              axis.text = element_blank(),\r\n              legend.title = element_blank())+\r\n              guides(fill = guide_legend(reverse=TRUE))\r\n\r\ndf2 <- df %>% mutate(Proportion2=c(25,25,13,13,6))\r\n\r\ndf3 <- df %>% mutate(Proportion3=c(19,25,19,25,13)) \r\n\r\n\r\np2 <-ggplot(df2, aes(x = year , y = Proportion2, fill = Results)) + \r\n        geom_col()+\r\n        geom_text(aes(label = paste0(Proportion2, \"%\")),\r\n                      position = position_stack(vjust = 0.5), \r\n                      size = 5)+ \r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n        coord_flip()+ \r\n        theme(legend.position = \"right\",\r\n              panel.grid.major = element_blank(), \r\n              panel.grid.minor = element_blank(),\r\n              panel.border = element_blank(),\r\n              panel.background = element_blank(), \r\n              axis.title = element_blank(),\r\n              axis.ticks = element_blank(),\r\n              axis.text = element_blank(),\r\n              legend.title = element_blank())+\r\n              guides(fill = guide_legend(reverse=TRUE))\r\n\r\np3 <-ggplot(df3, aes(x = year , y = Proportion3, fill = Results)) + \r\n        geom_col()+\r\n        geom_text(aes(label = paste0(Proportion3, \"%\")),\r\n                      position = position_stack(vjust = 0.5), \r\n                      size = 5)+ \r\n        scale_fill_manual(values = c(\"#67bc6b\",\"#d2e059\",\"#ffcb27\",\"#f37021\",\"#ed5351\"))+\r\n        coord_flip()+ \r\n        theme(legend.position = \"right\",\r\n              panel.grid.major = element_blank(), \r\n              panel.grid.minor = element_blank(),\r\n              panel.border = element_blank(),\r\n              panel.background = element_blank(), \r\n              axis.title = element_blank(),\r\n              axis.ticks = element_blank(),\r\n              axis.text = element_blank(),\r\n              legend.title = element_blank())+\r\n              guides(fill = guide_legend(reverse=TRUE))\r\n\r\n\r\n\r\nWith patchwork package you can combine graphs side by side with “+” or under each other with “/”.\r\n\r\n\r\np1 / p2 / p3 & theme(legend.position = \"right\",\r\n                     legend.text = element_text(size=15))\r\n\r\n\r\n\r\n\r\nYou see each graphs bring their legends with them. So legend part repeat 3 times. To prevent labels from repeating, we will add last line of code plot_layout(guides = “collect”)\r\n\r\n\r\np <- p1 / p2 / p3 & theme(legend.position = \"right\",\r\n                          legend.text = element_text(size=15))\r\n                    \r\np + plot_layout(guides = \"collect\")\r\n\r\n\r\n\r\n\r\nI thinks two graphs nearly match except one point that Reports graph’s legends at the top right but our graph’s legend is at the middle right. I belive this can be ignored.\r\nThanks for reading my post. Please don’t hesitate to say your feedback by \r\nAlso special thanks to my wife Zeliha Dindas for support and code review 🤗\r\n\r\n——————————- This Post Made with by ❤️ ———————————\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-04-08-horizontal-stacked-bar-chart/horizontal-stacked-bar-chart_files/figure-html5/unnamed-chunk-11-1.png",
    "last_modified": "2021-04-10T23:19:00+03:00",
    "input_file": "horizontal-stacked-bar-chart.utf8.md"
  },
  {
    "path": "posts/2021-03-22-first-post/",
    "title": "First Post",
    "description": "Try to send my new post",
    "author": [
      {
        "name": "Serdar DINDAS",
        "url": {}
      }
    ],
    "date": "2021-03-22",
    "categories": [],
    "contents": "\r\nThis is my first blog post. I will use Netlify via Github\r\nThanks for Lisa Lendway for amazing distill package tutorial.\r\nAnd here is the motivation cutties from Allison Horst\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-22T14:57:02+03:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog",
    "description": "Stay tuned for upcoming posts",
    "author": [
      {
        "name": "Serdar DINDAS",
        "url": {}
      }
    ],
    "date": "2021-03-21",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-22T15:00:16+03:00",
    "input_file": {}
  }
]
